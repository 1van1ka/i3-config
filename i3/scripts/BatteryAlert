#!/usr/bin/env python

import subprocess
import os
import time

WARNING_LEVEL = 35
CRITICAL_LEVEL = 15
BATTERY_PATH = "/sys/class/power_supply/BAT0"

def is_charging() -> int:
    result = subprocess.run(
        ["cat", f"{BATTERY_PATH}/status"],
        capture_output=True, text=True, check=True
    )

    if "Charging" in result.stdout:
        return 1
    elif "Discharging" in result.stdout:
        return -1
    else:
        return 0

def capacity() -> int:
    result = subprocess.run(
        ["cat", f"{BATTERY_PATH}/capacity"],
        capture_output=True, text=True, check=True
    )
    return int(result.stdout.strip())

def notify_user(message: str, level: str) -> None:
    subprocess.run(["notify-send", "-u", level, "-a", "Battery Alert", message])

def main() -> None:
    capacity_level = capacity()
    charging_status = is_charging()


    path = os.path.expanduser("~/.config/i3/scripts/Battery")

    with open(os.path.join(path, "lastcapacity"), "r") as f:
        last_capacity_level = int(f.read().strip())
    
    with open(os.path.join(path, "laststatus"), "r") as f:
        last_status = int(f.read().strip())


    dict_status = {
        -1: "Discharging",
        1: "Charging",
        0: "Full"
    }

    if charging_status != last_status:
        notify_user(level="low", message=f"The battery is {dict_status[charging_status]}")
        with open(os.path.join(path, "laststatus"), "w") as f:
            f.write(str(charging_status))


    with open(os.path.join(path, "lastcapacity"), "w") as f:
        if charging_status == -1:
            if 20 <= capacity_level <= WARNING_LEVEL and not(capacity_level % 5) and last_capacity_level > capacity_level:
                notify_user(message=f"Level battery is warning\n-> {capacity_level}% <-", level="critical")
            elif capacity_level == CRITICAL_LEVEL and last_capacity_level > capacity_level:
                notify_user(message=f"Level battery is very low\n-> {capacity_level}% <-\nlaptop turns off without warning", level="critical")
        f.write(str(capacity_level))


if __name__ == "__main__":
    while True:
        main()
        time.sleep(2.5)
